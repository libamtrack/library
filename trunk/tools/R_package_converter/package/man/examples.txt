::AT.run.GSM.method::
# Compute the relative efficiency of an Alanine detector in a mixed
# carbon / proton field
AT.run.GSM.method( particle.no                          = 1001,                        # namely protons with
                   E.MeV.u                              = 10,                          # 10 MeV/u
                   fluence.cm2.or.dose.Gy               = c(-1.0),                     # delivering 1 Gy
                   material.no                          = 5,                           # i.e. Alanine
                   rdd.model                            = 3,                           # simple 'Geiss' parametrization of radial dose distribution
                   rdd.parameter                        = 50e-9,                       # with 50 nm core radius
                   er.model                             = 4,                           # M. Scholz' parametrization of track radius
                   gamma.model                          = 4,                           # Use exponential saturation
                   gamma.parameters                     = c(1,500),                    # max. response normalized to 1, saturation dose 500 Gy
                   N.runs                               = 1000,                        # resample 1000 times
                   write.output                         = TRUE,                        # write a log file
                   nX                                   = 10,                          # use a 10x10 grid
                   voxel.size.m                         = 5e-9,                        # with 5 nm voxel size
                   lethal.events.mode                   = FALSE)                       # use independent subtargets
::AT.run.IGK.method::
# Compute the relative efficiency of an Alanine detector in a mixed
# carbon / proton field
AT.run.IGK.method( particle.no                          = 1001,                        # namely protons with
                   E.MeV.u                              = 10,                          # 10 MeV/u
                   fluence.cm2.or.dose.Gy               = c(-1.0),                     # delivering 1 Gy
                   material.no                          = 5,                           # i.e. Alanine
                   rdd.model                            = 4,                           # Katz parametrization of radial dose distribution with simplified extended targets
                   rdd.parameter                        = c(5e-8,1e-10),               # with 50 nm target size and 1e-10 dose minimum
                   er.model                             = 2,                           # Butts&Katz parametrization of track radius
                   gamma.model                          = 2,                           # Use general target/hit model but here...
                   gamma.parameters                     = c(1,500,1,1,0),              # ...as exponential saturation with characteristic dose 500 Gy
                   saturation.cross.section.factor      = 1.4,                         # factor to take 'brush' around track into account
				   write.output                         = TRUE)                        # write a log file
::AT.run.CPPSC.method::
# Compute the relative efficiency of an Alanine detector in a mixed
# carbon / proton field
AT.run.CPPSC.method( particle.no                          = c(6012, 1001, 1001),         # namely carbon, protons, and protons with
                     E.MeV.u                              = c(270, 270, 5),              # 270 MeV/u (primary Carbon, 270 MeV/u and 5 MeV/u (fast and slow proton component) 
                     fluence.cm2.or.dose.Gy               = c(1e8, 1e9, 1e7),            # and their corresponding fluences
                     material.no                          = 5,                           # i.e. Alanine
                     rdd.model                            = 3,                           # simple 'Geiss' parametrization of radial dose distribution
                     rdd.parameter                        = 50e-9,                       # with 50 nm core radius
                     er.model                             = 4,                           # M. Scholz' parametrization of track radius
                     gamma.model                          = 2,                           # General hit/target X ray response, but
                     gamma.parameters                     = c(1,500,1,1,0),              # as simple single exponential saturation (one hit, one target), saturation dose 500 Gy
                     N2                                   = 10,                          # ten bins per factor 2 for internal local dose histogramming
                     fluence.factor                       = 1.0,                         # can be used to easily scale total fluence (historical)
					 write.output                         = TRUE,                        # write a log file
                     shrink.tails                         = TRUE,                        # cut tails of local dose distribution, if...
                     shrink.tails.under                   = 1e-30,                       # ... they contribute less then 1e-30 to first moment of histogram
                     adjust.N2                            = TRUE,                        # perform rebinning if local dose distribution becomes too narrow
                     lethal.events.mode                   = FALSE)                       # use independent subtargets
::AT.beta.from.E::
# Compute beta between 1 and 1000 MeV/u:
AT.beta.from.E( E.MeV.u     = c(1,10,100,1000))
::AT.LET.keV.um::
# Compute the LET (in keV/um) of a 270 MeV/u carbon ion in Aluminum:
AT.LET.keV.um( E.MeV.u     = 270,
			   particle.no = 6012,
			   material.no = 3)
::AT.D.RDD.Gy::
# Compute dose in several distances of an 100 MeV/u neon ion in water according to 'Site' parametrization
AT.D.RDD.Gy( 	r.m		      = 10^(-9:-4),
                E.MeV.u	      = 100,
                particle.no	  = 10020,
				material.no	  = 1,
				rdd.model	  = 4,
				rdd.parameter = c(5e-8, 1e-10),
                er.model	  = 2)

# Compare the Geiss parametrization of RDD for protons and Carbon ions at different energies:
require(lattice)
df	<-	expand.grid(	E.MeV.u	       = 10^seq(0, 3, length.out = 4),       # from 1 to 1000 MeV/u in 4 steps
                        particle.no	   = c(1001,6012),                       # protons and carbons
                        r.m		       = 10^seq(-9, -2, length.out = 100),   # from 1 nm to 1 cm in 100 steps
                        material.no    = 2,                                  # Aluminium Oxide
                        rdd.model	   = 3,                                  # Geiss parametrization
                        rdd.parameter  = 5e-8,                               # Fixed core size of 50 nm
                        er.model	   = 4,                                  # Geiss track width parametrization
                        D.Gy		   = 0)                                  # For later use

ii                   <-  df$particle.no == 1001                              # Add particle names
df$particle.name     <-  "Carbon-12"
df$particle.name[ii] <-  "Protons"

for (i in 1:nrow(df)){                                                       # Loop through particles/energies
	df$D.Gy[i]	<-	AT.D.RDD.Gy( 	r.m		      = df$r.m[i],
                                    E.MeV.u	      = df$E.MeV.u[i],
                                    particle.no	  = df$particle.no[i],
                                    material.no	  = df$material.no[i],
                                    rdd.model	  = df$rdd.model[i],
                                    rdd.parameter = df$rdd.parameter[i],
                                    er.model	  = df$er.model[i])[[1]]
}

xyplot( log10(D.Gy) ~ log10(r.m)|particle.name,                              # Plot
		df,
		type      = 'l',
		groups    = E.MeV.u,
		auto.key  = TRUE)[c(2,1)]
::AT.max.electron.ranges.m::
# Compute the electron range in PMMA for the Tabata parametrization between 0.3 keV and 30 MeV
AT.max.electron.ranges.m( E.MeV.u     = 0.3 * 10^(-4:2),
			              material.no = 4,
                          er.model    = 7)
::Was anderes::
LALALALA
