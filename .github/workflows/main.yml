name: Linux and Windows Tests

on:
  push:
    branches: [ master ]
    tags: ['v*']
  pull_request:
    branches: [ master ]
  release:
    types: [published]

jobs:
  build_and_test_linux:
    name: Compile and test library on Linux
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
      
    - name: Restore APT cache
      uses: actions/cache@v4
      with:
        path: /var/cache/apt/archives
        key: apt-cache-${{ runner.os }}-${{ hashFiles('.github/workflows/build.yml') }}
        restore-keys: apt-cache-${{ runner.os }}-

    - name: Install necessary packages
      run: |
        sudo apt-get update
        sudo apt-get -y --no-install-recommends install libgsl-dev

    - name: Clean APT cache to reduce cache size
      run: sudo apt-get clean

    - name: compile and install
      run: |
        mkdir build
        cd build
        cmake ..  -DCMAKE_BUILD_TYPE=Release 
        cmake --build . --parallel
        cmake --install . --prefix $HOME/.local
      
    - name: tests
      run: |
        LD_LIBRARY_PATH="$HOME/.local/lib:$LD_LIBRARY_PATH" amtrack_test
        LD_LIBRARY_PATH="$HOME/.local/lib:$LD_LIBRARY_PATH" amtrack_demo

    - name: upload compiled library
      uses: actions/upload-artifact@v4
      with:
        name: libamtrack
        path: $HOME/.local/
  
  build_and_test_windows:
    name: Compile and test library on Windows
    runs-on: windows-latest

    steps:
    - uses: actions/checkout@v4

    - name: Restore vcpkg cache
      uses: actions/cache@v4
      with:
        path: vcpkg
        key: vcpkg-${{ runner.os }}-${{ hashFiles('vcpkg.json') }}
        restore-keys: vcpkg-${{ runner.os }}-

    - name: Install vcpkg if not cached
      run: |
        if (-Not (Test-Path "vcpkg")) {
          git clone --depth 1 https://github.com/microsoft/vcpkg
          .\vcpkg\bootstrap-vcpkg.bat -disableMetrics
        }
      shell: pwsh
    
    - name: Restore vcpkg dependencies cache
      uses: actions/cache@v4
      with:
        path: ${{ github.workspace }}/vcpkg_cache
        key: vcpkg-deps-${{ runner.os }}-${{ hashFiles('vcpkg.json') }}
        restore-keys: vcpkg-deps-${{ runner.os }}-
    
    - name: Restore vcpkg installed packages cache
      uses: actions/cache@v4
      with:
        path: ${{ github.workspace }}/vcpkg_installed
        key: vcpkg-installed-${{ runner.os }}-${{ hashFiles('vcpkg.json') }}
        restore-keys: vcpkg-installed-${{ runner.os }}-
    
    - name: Ensure vcpkg directories exist
      run: |
        mkdir -Force "${{ github.workspace }}/vcpkg_cache"
        mkdir -Force "${{ github.workspace }}/vcpkg_installed"
      shell: pwsh
    
    - name: Install dependencies
      env:
        VCPKG_DEFAULT_BINARY_CACHE: ${{ github.workspace }}/vcpkg_cache
        VCPKG_INSTALLED_DIR: ${{ github.workspace }}/vcpkg_installed
      run: .\vcpkg\vcpkg.exe install
    
    - name: Check Visual Studio installations
      shell: cmd
      run: |
        "C:\Program Files (x86)\Microsoft Visual Studio\Installer\vswhere.exe" -all
    
    - name: Make build directory
      run: mkdir build
    
    - name: Compile and install
      env:
        CMAKE_PREFIX_PATH: ${{ github.workspace }}/vcpkg_installed/x64-windows
        GSL_DIR: ${{ github.workspace }}/vcpkg_installed/x64-windows
        GETOPT_DIR: ${{ github.workspace }}/vcpkg_installed/x64-windows
      working-directory: build
      shell: pwsh
      run: |
        $INSTALL_DIR="${{ runner.temp }}\libamtrack"
        cmake .. -DCMAKE_BUILD_TYPE=Release -G "Visual Studio 17 2022" -A x64
        cmake --build . --parallel --config Release
        cmake --install . --prefix "$INSTALL_DIR" --config Release
    
      
      # - name: Run amtrack_test
      #   shell: pwsh
      #   run: '${{ runner.temp }}\libamtrack\bin\amtrack_test.exe'
      
      # - name: Run amtrack_demo
      #   shell: pwsh
      #   run: '${{ runner.temp }}\libamtrack\bin\amtrack_demo.exe'
      
    - name: Upload compiled library
      uses: actions/upload-artifact@v4
      with:
        name: libamtrack
        path: ${{ runner.temp }}/libamtrack/


  javascript_package:
    runs-on: ubuntu-latest
    needs: [build_and_test_linux, build_and_test_windows]
    steps:
      - uses: actions/checkout@v4
      
      - uses: mymindstorm/setup-emsdk@v14

      - name: Cache compiled GSL
        uses: actions/cache@v4
        env:
          cache-name: cache-node-modules
        with:
          path: $HOME/usr
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/main.yml') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-

      - name: Compile GSL
        run: |
          wget -q "http://ftpmirror.gnu.org/gnu/gsl/gsl-latest.tar.gz"
          mkdir $HOME/gsl-latest
          tar -xzf gsl-latest.tar.gz -C $HOME/gsl-latest
          mv $HOME/gsl-latest/** $HOME/gsl-latest/gsl
          mkdir $HOME/usr
          cd $HOME/gsl-latest/gsl/ && emconfigure ./configure --prefix=$HOME/usr --disable-shared && emmake make -j && emmake make install
          ls -al $HOME/usr/lib/
          
      - name: Compile libamtrack webassembly package
        run: |          
         GSL_INCLUDE_DIRS=$HOME/usr/include GSL_LIBRARY=$HOME/usr/lib/libgsl.a GSL_CBLAS_LIBRARY=$HOME/usr/lib/libgslcblas.a  ./compile_to_js.sh
        working-directory: distributions/JavaScript
  
      - name: 'Upload Artifact'
        uses: actions/upload-artifact@v4
        with:
          name: wasm file
          path: |
            distributions/JavaScript/output/libat.wasm
            distributions/JavaScript/output/libat.js
          if-no-files-found: error
          retention-days: 5
