name: Linux and Windows Tests

on:
  push:
    branches: [ master ]
    tags: ['v*']
  pull_request:
    branches: [ master ]
  release:
    types: [published]

jobs:
  build_and_test_linux:
    name: Compile and test library on Linux
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
        
      - name: Install necessary packages
        run: |
          sudo apt-get install -y --no-install-recommends libgsl-dev

      - name: Compile and install
        run: |
          mkdir build
          cd build
          cmake .. -DCMAKE_BUILD_TYPE=Release 
          cmake --build . --parallel
          cmake --install . --prefix "${{ runner.temp }}/usr"
        
      - name: Run tests
        run: |
          export PATH="${{ runner.temp }}/usr/bin:$PATH"
          export LD_LIBRARY_PATH="${{ runner.temp }}/usr/lib:$LD_LIBRARY_PATH"
          amtrack_test
          amtrack_demo

      - name: Upload compiled library
        uses: actions/upload-artifact@v4
        with:
          name: libamtrack-linux
          path: "${{ runner.temp }}/usr/"
          if-no-files-found: error
          retention-days: 5

  build_and_test_windows:
    name: Compile and test library on Windows
    needs: [build_and_test_linux]
    runs-on: windows-latest

    steps:
    - uses: actions/checkout@v4

    - name: Ensure vcpkg directories exist
      run: |
        mkdir -Force "${{ github.workspace }}/vcpkg_cache"
        mkdir -Force "${{ github.workspace }}/vcpkg_installed"
      shell: pwsh

    - name: Restore vcpkg cache
      id: cache-vcpkg
      uses: actions/cache@v4
      with:
        path: vcpkg
        key: vcpkg-${{ runner.os }}-${{ hashFiles('vcpkg.json') }}
        restore-keys: vcpkg-${{ runner.os }}-
  
    - name: Install vcpkg if not cached
      if: steps.cache-vcpkg.outputs.cache-hit != 'true'
      run: |
        git clone --depth 1 https://github.com/microsoft/vcpkg
        .\vcpkg\bootstrap-vcpkg.bat -disableMetrics
      shell: pwsh
  
    - name: Restore vcpkg dependencies cache
      id: cache-vcpkg-deps
      uses: actions/cache@v4
      with:
        path: ${{ github.workspace }}/vcpkg_cache
        key: vcpkg-deps-${{ runner.os }}-${{ hashFiles('vcpkg.json') }}
        restore-keys: vcpkg-deps-${{ runner.os }}-
    
    - name: Restore vcpkg installed packages cache
      id: cache-vcpkg-installed
      uses: actions/cache@v4
      with:
        path: ${{ github.workspace }}/vcpkg_installed
        key: vcpkg-installed-${{ runner.os }}-${{ hashFiles('vcpkg.json') }}
        restore-keys: vcpkg-installed-${{ runner.os }}-
    
    - name: Ensure vcpkg directories exist
      if: steps.cache-vcpkg-deps.outputs.cache-hit != 'true' || steps.cache-vcpkg-installed.outputs.cache-hit != 'true'
      run: |
        mkdir -Force "${{ github.workspace }}/vcpkg_cache"
        mkdir -Force "${{ github.workspace }}/vcpkg_installed"
      shell: pwsh
    
    - name: Install dependencies
      if: steps.cache-vcpkg-deps.outputs.cache-hit != 'true' || steps.cache-vcpkg-installed.outputs.cache-hit != 'true'
      env:
        VCPKG_DEFAULT_BINARY_CACHE: ${{ github.workspace }}/vcpkg_cache
        VCPKG_INSTALLED_DIR: ${{ github.workspace }}/vcpkg_installed
      run: .\vcpkg\vcpkg.exe install
    
    - name: Make build directory
      run: mkdir build
    
    - name: Compile and install
      env:
        CMAKE_PREFIX_PATH: ${{ github.workspace }}/vcpkg_installed/x64-windows
        GSL_DIR: ${{ github.workspace }}/vcpkg_installed/x64-windows
        GETOPT_DIR: ${{ github.workspace }}/vcpkg_installed/x64-windows
      working-directory: build
      shell: pwsh
      run: |
        $INSTALL_DIR="${{ runner.temp }}\libamtrack"
        cmake .. -DCMAKE_BUILD_TYPE=Release -G "Visual Studio 17 2022" -A x64
        cmake --build . --parallel --config Release
        cmake --install . --prefix "$INSTALL_DIR" --config Release
    
      # - name: Run amtrack_test
      #   shell: pwsh
      #   run: '${{ runner.temp }}\libamtrack\bin\amtrack_test.exe'
      
      # - name: Run amtrack_demo
      #   shell: pwsh
      #   run: '${{ runner.temp }}\libamtrack\bin\amtrack_demo.exe'
      
    - name: Upload compiled library
      uses: actions/upload-artifact@v4
      with:
        name: libamtrack-windows
        path: ${{ runner.temp }}/libamtrack/
        if-no-files-found: error
        retention-days: 5

  javascript_package:
    runs-on: ubuntu-latest
    needs: [build_and_test_linux]
    steps:
      - uses: actions/checkout@v4
        
      - name: Ensure GSL install directory exists
        run: mkdir -p "${{ github.workspace }}/usr"

      - uses: mymindstorm/setup-emsdk@v14

      - name: Cache compiled GSL
        id: cache-gsl
        uses: actions/cache@v4
        with:
          path: ${{ github.workspace }}/usr
          key: ${{ runner.os }}-gsl-${{ hashFiles('**/main.yml') }}
          restore-keys: |
            ${{ runner.os }}-gsl-
            ${{ runner.os }}-
      
      - name: Compile GSL
        if: steps.cache-gsl.outputs.cache-hit != 'true'
        run: |
          wget -q "http://ftpmirror.gnu.org/gnu/gsl/gsl-latest.tar.gz"
          mkdir -p "${{ github.workspace }}/gsl-latest"
          tar -xzf gsl-latest.tar.gz -C "${{ github.workspace }}/gsl-latest"
          mv "${{ github.workspace }}/gsl-latest/"* "${{ github.workspace }}/gsl-latest/gsl"
          mkdir -p "${{ github.workspace }}/usr"
          cd "${{ github.workspace }}/gsl-latest/gsl/" && emconfigure ./configure --prefix="${{ github.workspace }}/usr" --disable-shared && emmake make -j && emmake make install
          ls -al "${{ github.workspace }}/usr/lib/"
          ls -al "${{ github.workspace }}/usr/include/"
                
      - name: Compile libamtrack webassembly package
        working-directory: distributions/JavaScript
        env:
          GSL_INCLUDE_DIRS: "${{ github.workspace }}/usr/include"
          GSL_LIBRARY: "${{ github.workspace }}/usr/lib/libgsl.a"
          GSL_CBLAS_LIBRARY: "${{ github.workspace }}/usr/lib/libgslcblas.a"
        run: ./compile_to_js.sh

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: libamtrack-wasm
          path: |
            distributions/JavaScript/output/libat.wasm
            distributions/JavaScript/output/libat.js
          if-no-files-found: error
          retention-days: 5
